[build-system]
requires = ["uv_build == 0.8.*"]
build-backend = "uv_build"

[project]
name = "parsita"
version = "2.2.4"
description = "Parser combinator library for Python"
authors = [ { name = "David Hagen", email = "david@drhagen.com" } ]
license = "MIT"
license-files = ["LICENSE"]
readme = "README.md"
requires-python = ">=3.10"
keywords = ["text", "parsing", "parser", "combinator"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11", 
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3.14",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

dependencies = [
    "returns>=0.20,<0.27"
]

[project.urls]
Documentation = "https://parsita.drhagen.com"
Repository = "https://github.com/drhagen/parsita"

[dependency-groups]
nox = [
    "nox-uv == 0.6.*",
]
test = [
    "pytest == 8.*",
    "pytest-timeout == 2.*",
    "coverage == 7.*"
]
lint = [
    "ruff == 0.14.*"
]
typing = [
    "mypy == 1.*"
]
docs = [
    "mkdocs-material == 9.*"
]

[tool.uv]
default-groups = "all"
python-preference = "only-managed"

[tool.pytest.ini_options]
addopts = ["--strict-config", "--strict-markers"]
xfail_strict = true
filterwarnings = ["error"]

[tool.coverage.run]
branch = true
source_pkgs = ["parsita"]
relative_files = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "raise NotImplementedError",
    "if TYPE_CHECKING",
    "@overload",
]

[tool.coverage.paths]
source = [
    "src/",
    "**/site-packages/",
]

[tool.ruff]
src = ["src"]
line-length = 99

[tool.ruff.lint]
extend-select = [
    "I", # isort
    "N", # pep8-naming
    "RUF", # ruff
    "B", # flake8-bugbear
    "N", # flake8-broken-line
    "C4", # flake8-comprehensions
    "PIE", # flake8-pie
    "PT", # flake8-pytest-style
    "PTH", # flake8-use-pathlib
    "ERA", # flake8-eradicate
]
# F821: undefined-name; Parsita triggers this, but code coverage will catch it
# N805: invalid-first-argument-name-for-method; Parsita tests and examples define functions in class bodies
extend-ignore = ["F821", "N805"]
isort.combine-as-imports = true

[tool.ruff.lint.per-file-ignores]
# F401: unused-import; Allow unused imports in __init__.py files
"__init__.py" = ["F401"]

[tool.mypy]
strict = true
# name-defined; Parsita triggers this, but code coverage will catch it
disable_error_code = ["name-defined"]
