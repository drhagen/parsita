name: ci

on:
  pull_request:
  push:
    branches:
      - master

env:
  python-version: "3.9"
  poetry-version: "1.4.1"

jobs:
  test:
    strategy:
      matrix:
        python-version: ["3.7", "3.8", "3.9", "3.10", "3.11"]
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
      - name: Install Poetry
        run: pipx install poetry==${{ env.poetry-version }}
      - name: Install Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: poetry
      - name: Install environment
        run: poetry install
      - name: Test with nox
        run: poetry run nox -s test-${{ matrix.python-version }}
      - name: Store coverage
        uses: actions/upload-artifact@v3
        with:
          name: coverage
          path: .coverage.*
  coverage:
    needs: test
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
      - name: Install Poetry
        run: pipx install poetry==${{ env.poetry-version }}
      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.python-version }}
          cache: poetry
      - name: Install environment
        run: poetry install
      - name: Fetch coverage
        uses: actions/download-artifact@v3
        with:
          name: coverage
      - name: Combine coverage and generate report
        run: poetry run nox -s coverage
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          fail_ci_if_error: true
  lint:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
      - name: Install Poetry
        run: pipx install poetry==${{ env.poetry-version }}
      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.python-version }}
          cache: poetry
      - name: Install environment
        run: poetry install
      - name: Run code quality checks
        run: poetry run nox -s lint
  poetry-check:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
      - name: Install poetry
        run: pipx install poetry==${{ env.poetry-version }}
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.python-version }}
      - name: Validate Poetry configuration and lockfile freshness
        run: poetry lock --check
